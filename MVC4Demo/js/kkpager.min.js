function kkpager(pn, total, pagerid, goPageCall) { this.pagerid = pagerid, this.mode = "click", this.pno = pn, this.total = total, this.totalRecords = 10, this.isShowFirstPageBtn = true, this.isShowLastPageBtn = true, this.isShowPrePageBtn = true, this.isShowNextPageBtn = true, this.isShowTotalPage = true, this.isShowCurrPage = true, this.isShowTotalRecords = false, this.isGoPage = true, this.isWrapedPageBtns = true, this.isWrapedInfoTextAndGoPageBtn = true, this.hrefFormer = "", this.hrefLatter = "", this.gopageWrapId = "kkpager_gopage_wrap", this.gopageButtonId = "kkpager_btn_go", this.gopageTextboxId = "kkpager_btn_go_input"; this.goPageCallBack = goPageCall; this.lang = { firstPageText: "首页", firstPageTipText: "首页", lastPageText: "尾页", lastPageTipText: "尾页", prePageText: "上一页", prePageTipText: "上一页", nextPageText: "下一页", nextPageTipText: "下一页", totalPageBeforeText: "共", totalPageAfterText: "页", currPageBeforeText: "当前第", currPageAfterText: "页", totalInfoSplitStr: "/", totalRecordsBeforeText: "共", totalRecordsAfterText: "条数据", gopageBeforeText: "&nbsp;转到", gopageButtonOkText: "确定", gopageAfterText: "页", buttonTipBeforeText: "第", buttonTipAfterText: "页" } } (function () {
    kkpager.prototype.getLink = function (n) { if (n == 1) { return this.hrefFormer + this.hrefLatter } return this.hrefFormer + "_" + n + this.hrefLatter }; kkpager.prototype.click = function (n) { return false }; kkpager.prototype.getHref = function (n) { return "javascript:void(0)" }; kkpager.prototype.focus_gopage = function () { var btnGo = $("#" + this.pagerid).find("." + this.gopageButtonId); $("#" + this.pagerid).find("." + this.gopageTextboxId).attr("hideFocus", true); btnGo.show(); btnGo.css("left", "10px"); $("#" + this.pagerid).find("." + this.gopageTextboxId).addClass("focus"); btnGo.animate({ left: "+=30" }, 50) }; kkpager.prototype.blur_gopage = function () { var _this = this; setTimeout(function () { var btnGo = $("#" + _this.pagerid).find("." + _this.gopageButtonId); btnGo.animate({ left: "-=25" }, 100, function () { btnGo.hide(); $("#" + _this.pagerid).find("." + _this.gopageTextboxId).removeClass("focus") }) }, 400) }; kkpager.prototype.keypress_gopage = function () { var event = arguments[0] || window.event; var code = event.keyCode || event.charCode; if (code == 8) { return true } if (code == 13) { kkpager.gopage(); return false } if (event.ctrlKey && (code == 99 || code == 118)) { return true } if (code < 48 || code > 57) { return false } return true }, kkpager.prototype.gopage = function () { var str_page = $("#" + this.pagerid).find(("." + this.gopageTextboxId)).val(); if (isNaN(str_page)) { $("#" + this.gopageTextboxId).val(this.next); return } var n = parseInt(str_page); if (n < 1) { n = 1 } if (n > this.total) { n = this.total } if (this.mode == "click") { this._clickHandler(n) } else { window.location = this.getLink(n) } }, kkpager.prototype.selectPage = function (n) { this.pno = n; this.goPageCallBack(n); this.generPageHtml(this._config, true) }, kkpager.prototype.generPageHtml = function (config, enforceInit) {
        if (enforceInit || !this.inited) { this.init(this) } var str_first = "", str_prv = "", str_next = "", str_last = ""; if (this.isShowFirstPageBtn) { if (this.hasPrv) { str_first = "<a " + this._getHandlerStr(1) + ' title="' + (this.lang.firstPageTipText || this.lang.firstPageText) + '">' + this.lang.firstPageText + "</a>" } else { str_first = '<span class="disabled">' + this.lang.firstPageText + "</span>" } } if (this.isShowPrePageBtn) { if (this.hasPrv) { str_prv = "<a " + this._getHandlerStr(this.prv) + ' title="' + (this.lang.prePageTipText || this.lang.prePageText) + '">' + this.lang.prePageText + "</a>" } else { str_prv = '<span class="disabled">' + this.lang.prePageText + "</span>" } } if (this.isShowNextPageBtn) { if (this.hasNext) { str_next = "<a " + this._getHandlerStr(this.next) + ' title="' + (this.lang.nextPageTipText || this.lang.nextPageText) + '">' + this.lang.nextPageText + "</a>" } else { str_next = '<span class="disabled">' + this.lang.nextPageText + "</span>" } } if (this.isShowLastPageBtn) { if (this.hasNext) { str_last = "<a " + this._getHandlerStr(this.total) + ' title="' + (this.lang.lastPageTipText || this.lang.lastPageText) + '">' + this.lang.lastPageText + "</a>" } else { str_last = '<span class="disabled">' + this.lang.lastPageText + "</span>" } } var str = ""; var dot = '<span class="spanDot">...</span>'; var total_info = '<span class="totalText">'; var total_info_splitstr = '<span class="totalInfoSplitStr">' + this.lang.totalInfoSplitStr + "</span>"; if (this.isShowCurrPage) { total_info += this.lang.currPageBeforeText + '<span class="currPageNum">' + this.pno + "</span>" + this.lang.currPageAfterText; if (this.isShowTotalPage) { total_info += total_info_splitstr; total_info += this.lang.totalPageBeforeText + '<span class="totalPageNum">' + this.total + "</span>" + this.lang.totalPageAfterText } else { if (this.isShowTotalRecords) { total_info += total_info_splitstr; total_info += this.lang.totalRecordsBeforeText + '<span class="totalRecordNum">' + this.totalRecords + "</span>" + this.lang.totalRecordsAfterText } } } else {
            if (this.isShowTotalPage) { total_info += this.lang.totalPageBeforeText + '<span class="totalPageNum">' + this.total + "</span>" + this.lang.totalPageAfterText; if (this.isShowTotalRecords) { total_info += total_info_splitstr; total_info += this.lang.totalRecordsBeforeText + '<span class="totalRecordNum">' + this.totalRecords + "</span>" + this.lang.totalRecordsAfterText } } else {
                if (this.isShowTotalRecords) {
                    total_info += this.lang.totalRecordsBeforeText + '<span class="totalRecordNum">' + this.totalRecords + "</span>" + this.lang.totalRecordsAfterText
                }
            }
        } total_info += "</span>"; var gopage_info = ""; if (this.isGoPage) { gopage_info = '<span class="goPageBox">' + this.lang.gopageBeforeText + "<span  class=" + this.gopageWrapId + ">" + '<input type="button" class="' + this.gopageButtonId + '"  value="' + this.lang.gopageButtonOkText + '" />' + '<input type="text" class="' + this.gopageTextboxId + '" value="' + this.next + '" /></span>' + this.lang.gopageAfterText + "</span>" } if (this.total <= 8) { for (var i = 1; i <= this.total; i++) { if (this.pno == i) { str += '<span class="curr">' + i + "</span>" } else { str += "<a " + this._getHandlerStr(i) + ' title="' + this.lang.buttonTipBeforeText + i + this.lang.buttonTipAfterText + '">' + i + "</a>" } } } else { if (this.pno <= 5) { for (var i = 1; i <= 7; i++) { if (this.pno == i) { str += '<span class="curr">' + i + "</span>" } else { str += "<a " + this._getHandlerStr(i) + ' title="' + this.lang.buttonTipBeforeText + i + this.lang.buttonTipAfterText + '">' + i + "</a>" } } str += dot } else { str += "<a " + this._getHandlerStr(1) + ' title="' + this.lang.buttonTipBeforeText + "1" + this.lang.buttonTipAfterText + '">1</a>'; str += "<a " + this._getHandlerStr(2) + ' title="' + this.lang.buttonTipBeforeText + "2" + this.lang.buttonTipAfterText + '">2</a>'; str += dot; var begin = this.pno - 2; var end = this.pno + 2; if (end > this.total) { end = this.total; begin = end - 4; if (this.pno - begin < 2) { begin = begin - 1 } } else { if (end + 1 == this.total) { end = this.total } } for (var i = begin; i <= end; i++) { if (this.pno == i) { str += '<span class="curr">' + i + "</span>" } else { str += "<a " + this._getHandlerStr(i) + ' title="' + this.lang.buttonTipBeforeText + i + this.lang.buttonTipAfterText + '">' + i + "</a>" } } if (end != this.total) { str += dot } } } var pagerHtml = "<div>"; if (this.isWrapedPageBtns) { pagerHtml += '<span class="pageBtnWrap">' + str_first + str_prv + str + str_next + str_last + "</span>" } else { pagerHtml += str_first + str_prv + str + str_next + str_last } if (this.isWrapedInfoTextAndGoPageBtn) { pagerHtml += '<span class="infoTextAndGoPageBtnWrap">' + total_info + gopage_info + "</span>" } else { pagerHtml += total_info + gopage_info } pagerHtml += '</div><div style="clear:both;"></div>'; $("#" + this.pagerid).html(pagerHtml); this.RegisterClick()
    }; kkpager.prototype.init = function (config) { this.pno = isNaN(config.pno) ? 1 : parseInt(config.pno); this.total = isNaN(config.total) ? 1 : parseInt(config.total); this.totalRecords = isNaN(config.totalRecords) ? 0 : parseInt(config.totalRecords); if (config.pagerid) { this.pagerid = config.pagerid } if (config.mode) { this.mode = config.mode } if (config.gopageWrapId) { this.gopageWrapId = config.gopageWrapId } if (config.gopageButtonId) { this.gopageButtonId = config.gopageButtonId } if (config.gopageTextboxId) { this.gopageTextboxId = config.gopageTextboxId } if (config.isShowFirstPageBtn != undefined) { this.isShowFirstPageBtn = config.isShowFirstPageBtn } if (config.isShowLastPageBtn != undefined) { this.isShowLastPageBtn = config.isShowLastPageBtn } if (config.isShowPrePageBtn != undefined) { this.isShowPrePageBtn = config.isShowPrePageBtn } if (config.isShowNextPageBtn != undefined) { this.isShowNextPageBtn = config.isShowNextPageBtn } if (config.isShowTotalPage != undefined) { this.isShowTotalPage = config.isShowTotalPage } if (config.isShowCurrPage != undefined) { this.isShowCurrPage = config.isShowCurrPage } if (config.isShowTotalRecords != undefined) { this.isShowTotalRecords = config.isShowTotalRecords } if (config.isWrapedPageBtns) { this.isWrapedPageBtns = config.isWrapedPageBtns } if (config.isWrapedInfoTextAndGoPageBtn) { this.isWrapedInfoTextAndGoPageBtn = config.isWrapedInfoTextAndGoPageBtn } if (config.isGoPage != undefined) { this.isGoPage = config.isGoPage } if (config.lang) { for (var key in config.lang) { this.lang[key] = config.lang[key] } } this.hrefFormer = config.hrefFormer || ""; this.hrefLatter = config.hrefLatter || ""; if (config.getLink && typeof (config.getLink) == "function") { this.getLink = config.getLink } if (config.click && typeof (config.click) == "function") { this.click = config.click } if (config.getHref && typeof (config.getHref) == "function") { this.getHref = config.getHref } if (!this._config) { this._config = config } if (this.pno < 1) { this.pno = 1 } this.total = (this.total <= 1) ? 1 : this.total; if (this.pno > this.total) { this.pno = this.total } this.prv = (this.pno <= 2) ? 1 : (this.pno - 1); this.next = (this.pno >= this.total - 1) ? this.total : (this.pno + 1); this.hasPrv = (this.pno > 1); this.hasNext = (this.pno < this.total); this.inited = true }; kkpager.prototype._getHandlerStr = function (n) { if (this.mode == "click") { return 'href="' + this.getHref(n) + '" page=' + n + " class=" + this.pagerid + "" } return 'href="' + this.getLink(n) + '"' }; kkpager.prototype._clickHandler = function (n) { var res = false; this.selectPage(n); if (this.click && typeof this.click == "function") { res = this.click.call(this, n) || false } return res }; kkpager.prototype.RegisterClick = function () { var th = this; $("." + this.pagerid).click(function () { th._clickHandler($(this).attr("page")) }); $("#" + this.pagerid).find(".kkpager_btn_go").click(function () { th.gopage() }); $("#" + this.pagerid).find(".kkpager_btn_go_input").focus(function () { th.focus_gopage() }); $("#" + this.pagerid).find(".kkpager_btn_go_input").keypress(function (e) { th.keypress_gopage(e) }); $("#" + this.pagerid).find(".kkpager_btn_go_input").blur(function (e) { th.blur_gopage() }) }
})();